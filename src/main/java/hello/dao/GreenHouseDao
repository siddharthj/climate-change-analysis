package hello.dao;

import hello.model.IslandCount;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

//CISE Oracle Server	sj3@//oracle.cise.ufl.edu:1521/orcl
@Repository
public class GreenHouseDao {
    @Autowired
    private DataSource dataSource;
 //   private JdbcTemplate jdbcTemplate
    //new struct GandT: string:year,double:greenhouseemission, double:temperature
    //get the relationship between green house gas and temperature in certain country
    //name:country name,type: which gas(co2 or methane)
    public List<GandT> getGTincountry(string name,string type)
            throws SQLException {
        List<GandT> data = new ArrayList<>();
        Connection con = dataSource.getConnection();
        String query = "select ccode,emission_year,emission_amount,tem from( select ccode,years,avg(temperature_value) as tem from(
select country_code as ccode,extract(year from temperature_date) as years,temperature_value from temperature)
group by ccode,years
order by ccode,years),greenhouse_gas_emission,greenhouse_gas_type,country
where years=emission_year
and ccode=greenhouse_gas_emission.country_code
and greenhouse_gas_emission.gas_type=greenhouse_gas_type.gas_type_id
and country.country_code=ccode
and greenhouse_gas_type.greenhouse_gas_name='+"type"+'
and country.country_name='+"name"+'";
        try (Statement stmt = con.createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                Double emission = rs.getInt("emission_amount");
                Double tem=rs.getInt("tem");
                String year=rs.getInt("emission_year");
                GandT onedata = new GandT(year, emission, tem);
                data.add(onedata);
            }
        }
        return data;
    }
    //get the worldwide relationship between green house gas and temperature to see which gas has great influence on temperature
    //type:which gas(co2 or methane)
    public List<GandT> getGTrelationship(string type)
            throws SQLException {
        List<GandT> data = new ArrayList<>();
        Connection con = dataSource.getConnection();
        String query = "select temyears,tem,emission from(
select temyears,avg(temperature_value) as tem from(
select extract(year from temperature_date) as temyears,temperature_value from temperature)
group by temyears
order by temyears),(
select emission_year as gasyear,avg(emission_amount) as emission from greenhouse_gas_emission,greenhouse_gas_type
where greenhouse_gas_emission.gas_type=greenhouse_gas_type.gas_type_id
and greenhouse_gas_type.greenhouse_gas_name='+"type"+'
group by emission_year
order by emission_year)
where temyears=gasyear";
        try (Statement stmt = con.createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                Double emission = rs.getInt("emission");
                Double tem=rs.getInt("tem");
                String year=rs.getInt("temyears");
                GandT onedata = new GandT(years, emission, tem);
                data.add(onedata);
            }
        }
        return data;
    }
    //get top 10 countries which pproduce gas most
    //type:which gas(co2 or methane)
    public List<GandT> getGTrelationship(string type)
            throws SQLException {
        List<GandT> data = new ArrayList<>();
        Connection con = dataSource.getConnection();
        String query = "select temyears,tem,emission from(
select temyears,avg(temperature_value) as tem from(
select extract(year from temperature_date) as temyears,temperature_value from temperature)
group by temyears
order by temyears),(
select emission_year as gasyear,avg(emission_amount) as emission from greenhouse_gas_emission,greenhouse_gas_type
where greenhouse_gas_emission.gas_type=greenhouse_gas_type.gas_type_id
and greenhouse_gas_type.greenhouse_gas_name='+"type"+'
group by emission_year
order by emission_year)
where temyears=gasyear";
        try (Statement stmt = con.createStatement()) {
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                Double emission = rs.getInt("emission");
                Double tem=rs.getInt("tem");
                String year=rs.getInt("temyears");
                GandT onedata = new GandT(years, emission, tem);
                data.add(onedata);
            }
        }
        return data;
    }
}
